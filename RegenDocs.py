#!/usr/bin/env python2

import sys
import os
import pydoc
import inspect
import deforder
import gettext

# This is needed so that the "_" macro will be in the Python global namespace.
# Normally Transana.py does this, but since this is a standalone app it's
# necessary.
gettext.install('RegenDocs')

# These classes follow the form of Class and FileName being the same
classes = [ "BatchWaveformGenerator",
            "ChatWindow",
            "Clip",
            "ClipDataExport",
            "ClipPropertiesForm",
            "Collection",
            "CollectionPropertiesForm",
            "ColorListCtrl",
            "ConfigData",
            "CoreData",
            "CoreDataPropertiesForm",
            "DatabaseTreeTab",
            "DataObject",
            "DataWindow",
            "Episode",
            "EpisodeClipsTab",
            "EpisodePropertiesForm",
            "FileManagement",
            "FilterDialog",
            "Help",
            "Keyword",
            "KeywordListEditForm",
            "KeywordPropertiesForm",
            "KeywordsTab",
            "KeywordSummaryReport",
            "KWManager",
            "MenuSetup",
            "MenuWindow",
            "Note",
            "NoteEditor",
            "NotePropertiesForm",
            "NotesBrowser",
            "OptionsSettings",
            "PlayAllClips",
            "ProcessSearch",
            "RecordLock",
            "ReportGenerator",
            "RichTextEditCtrl",
            #"RTFDoc",
            #"RTFParser",
            "SearchDialog",
            "Series",
            "SeriesMap",
            "SeriesPropertiesForm",
            "SRBConnection",
            "SRBFileTransfer",
            #"TextDoc",
            "TextReport",
            "TransanaFontDialog",
            "Transcript",
            "TranscriptEditor",
            "TranscriptionUI",
            "TranscriptPropertiesForm",
            "TranscriptToolbar", 
            "VideoWindow",
            "VisualizationWindow",
            "WaveformProgress",
            "XMLExport",
            "XMLImport"]

# These classes do not follow the form of Class and FileName being the same or have not been tested in the above
classes2 = [("About","AboutBox"),
            ("ClipKeywordObject", "ClipKeyword"),
            ("ControlObjectClass", "ControlObject"),
            ("Dialogs", "GenForm"),
            ("GraphicsControlClass", "GraphicsControl"),
            ("KeywordMapClass", "KeywordMap"),
            ("KeywordMapPrintoutClass", "MyPrintout"),
            ("ReportGeneratorForNotes", "ReportGenerator"),
            ("ReportPrintoutClass", "MyPrintout"),
            ("TranscriptPrintoutClass", "MyPrintout"),
            ("UserNameandPasswordClass", "UsernameandPassword"),
            ("video_player", "VideoFrame")]

classes3 = [("DragAndDropObjects", "DataTreeDragDropData"),
            ("DragAndDropObjects", "DataTreeDropSource"),
            ("DragAndDropObjects", "DataTreeDropTarget"),
            ("DragAndDropObjects", "ClipDragDropData")]

# Defined Units we don't know how to process
classes4 = ["Transana"]

modules = ["DBInterface",
           "DragAndDropObjects",
           "Misc",
           "TransanaConstants",
           "TransanaExceptions",
           "TransanaGlobal",
           "WaveformGraphic"]

# Units that have been removed!
#   "Splash", "WindowControl", "video"


def genclass(c):
    """ Build an HTML File of a class in a source file of the same name """
    sys.argv = ["MakeClassDoc.py", c + ".py", c, ".." + os.sep +
                "Autogenerated Files" + os.sep + c + ".html"]
    execfile(sys.argv[0])

def genclass2(c, d):
    """ Build an HTML File of a class in a source file of a different name """
    sys.argv = ["MakeClassDoc.py", c + ".py", d, ".." + os.sep +
                "Autogenerated Files" + os.sep + c + ".html"]
    execfile(sys.argv[0])

def genclass3(c, d):
    """ Build an HTML File of a class in a source file of a different name, and
        name the HTML file after the class rather than the source file """
    sys.argv = ["MakeClassDoc.py", c + ".py", d, ".." + os.sep +
                "Autogenerated Files" + os.sep + d + ".html"]
    execfile(sys.argv[0])

def genmod(m):
    """ Build an HTML File from a source file that contains functions rather
        than classes """
    sys.argv = ["MakeModuleDoc.py", m + ".py", ".." + os.sep +
                "Autogenerated Files" + os.sep + m + ".html"]
    execfile(sys.argv[0])

for c in classes:
    print c
    genclass(c)

for (c, d) in classes2:
    print c, d
    genclass2(c, d)

for (c, d) in classes3:
    print c, d
    genclass3(c, d)

for m in modules:
    print m
    genmod(m)

print "All documentation files have been regenerated."
